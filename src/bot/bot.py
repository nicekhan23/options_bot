import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from loguru import logger
from src.db.models import SessionLocal, Ticker, SignalLog

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

logger.add("logs/bot.log", rotation="1 MB", retention="7 days", level="INFO")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Options Signal Bot.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/signals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/watchlist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–∏–∫–µ—Ä—ã\n"
        "/add [TICKER] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä\n"
        "/remove [TICKER] ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä"
    )

# === –ö–æ–º–∞–Ω–¥–∞ /watchlist ===
@dp.message(Command(commands=["watchlist"]))
async def cmd_watchlist(message: types.Message):
    session = SessionLocal()
    tickers = session.query(Ticker).all()
    session.close()
    if tickers:
        text = "üìå –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã:\n" + "\n".join([t.symbol for t in tickers])
    else:
        text = "–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç."
    await message.answer(text)

# === –ö–æ–º–∞–Ω–¥–∞ /add [TICKER] ===
@dp.message(Command(commands=["add"]))
async def cmd_add(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add [TICKER]")
        return
    symbol = args[1].upper()
    session = SessionLocal()
    existing = session.query(Ticker).filter(Ticker.symbol == symbol).first()
    if existing:
        await message.answer(f"{symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        new_ticker = Ticker(symbol=symbol)
        session.add(new_ticker)
        session.commit()
        await message.answer(f"‚úÖ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤.")
    session.close()

# === –ö–æ–º–∞–Ω–¥–∞ /remove [TICKER] ===
@dp.message(Command(commands=["remove"]))
async def cmd_remove(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove [TICKER]")
        return
    symbol = args[1].upper()
    session = SessionLocal()
    existing = session.query(Ticker).filter(Ticker.symbol == symbol).first()
    if existing:
        session.delete(existing)
        session.commit()
        await message.answer(f"‚ùå {symbol} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤.")
    else:
        await message.answer(f"{symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    session.close()

# === –ö–æ–º–∞–Ω–¥–∞ /signals ===
@dp.message(Command(commands=["signals"]))
async def cmd_signals(message: types.Message):
    session = SessionLocal()
    signals = session.query(SignalLog).order_by(SignalLog.signal_time.desc()).limit(10).all()
    session.close()
    if not signals:
        await message.answer("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text_lines = []
    for s in signals:
        text_lines.append(
            f"üö® {s.ticker} | {s.option_type} | Strike: {s.strike} | Exp: {s.expiration}\n"
            f"Volume change: {s.volume_change} | IV change: {s.iv_change}\n"
            f"OI change: {s.oi_change}\n"
            f"Time: {s.signal_time.strftime('%Y-%m-%d %H:%M')}\n"
            f"Source: {s.source}"
        )
    await message.answer("\n\n".join(text_lines))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def start_bot():
    logger.info("üöÄ Telegram bot started")
    await dp.start_polling(bot)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è main.py ===
if __name__ == "__main__":
    asyncio.run(start_bot())
