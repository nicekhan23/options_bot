import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from loguru import logger
from src.db.models import SessionLocal, Ticker, SignalLog
from src.db.models import Subscriber
from src.db.models import PutCallRatio
import config.config as config
from datetime import datetime, timezone

import os
from dotenv import load_dotenv

class SettingsState(StatesGroup):
    waiting_for_value = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

logger.add("logs/bot.log", rotation="1 MB", retention="7 days", level="INFO")

async def send_signal_to_subscribers(signal_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    session = SessionLocal()
    subscribers = session.query(Subscriber).filter(Subscriber.subscribed == True).all()
    session.close()
    
    if not subscribers:
        logger.info("No active subscribers")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    volume_change_emoji = "üìà" if signal_data.get('volume_change', 0) > 0 else "üìâ"
    iv_emoji = "üî•" if signal_data.get('iv_change', 0) > 0.05 else "üìä"
    
    text = (
        f"üö® <b>Unusual Options Activity Detected</b>\n\n"
        f"<b>Ticker:</b> {signal_data['ticker']}\n"
        f"<b>Type:</b> {signal_data['option_type']} | <b>Strike:</b> ${signal_data['strike']:.2f} | <b>Exp:</b> {signal_data['expiration']}\n"
        f"{volume_change_emoji} <b>Volume:</b> {signal_data.get('volume', 0):,} (+{signal_data.get('volume_change', 0):.1f}%)\n"
        f"{iv_emoji} <b>IV:</b> {signal_data.get('implied_volatility', 0)*100:.1f}% (Œî{signal_data.get('iv_change', 0)*100:+.1f}%)\n"
        f"<b>OI Change:</b> {signal_data.get('oi_change', 0):+,}\n"
        f"<b>Last Price:</b> ${signal_data.get('last_price', 0):.2f}\n"
        f"<b>Underlying:</b> ${signal_data.get('underlying_price', 0):.2f}\n"
        f"<b>Time:</b> {signal_data.get('signal_time', datetime.now(timezone.utc)()).strftime('%Y-%m-%d %H:%M')} UTC\n\n"
        f"üìä <a href='https://finance.yahoo.com/quote/{signal_data['ticker']}/options'>View on Yahoo Finance</a>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    for sub in subscribers:
        try:
            await bot.send_message(sub.user_id, text, disable_web_page_preview=True)
            logger.info(f"Signal sent to user {sub.user_id}")
        except Exception as e:
            logger.error(f"Failed to send signal to user {sub.user_id}: {e}")
            if "bot was blocked" in str(e).lower():
                session = SessionLocal()
                subscriber = session.query(Subscriber).filter(Subscriber.user_id == sub.user_id).first()
                if subscriber:
                    subscriber.subscribed = False
                    session.commit()
                session.close()
                
async def send_pcr_signal_to_subscribers(pcr_row):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PCR —Å–∏–≥–Ω–∞–ª –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    session = SessionLocal()
    subscribers = session.query(Subscriber).filter(Subscriber.subscribed == True).all()
    session.close()
    
    if not subscribers:
        return
    
    emoji = "üêª" if pcr_row['signal_type'] == 'BEARISH' else "üêÇ"
    
    text = (
        f"{emoji} <b>Put/Call Ratio Alert</b>\n\n"
        f"<b>Ticker:</b> {pcr_row['ticker']}\n"
        f"<b>Signal:</b> {pcr_row['signal_type']}\n\n"
        f"<b>Volume PCR:</b> {pcr_row['pcr_volume']:.2f}\n"
        f"  ‚Ä¢ Calls: {int(pcr_row['call_volume']):,}\n"
        f"  ‚Ä¢ Puts: {int(pcr_row['put_volume']):,}\n\n"
        f"<b>OI PCR:</b> {pcr_row['pcr_oi']:.2f}\n"
        f"  ‚Ä¢ Calls: {int(pcr_row['call_oi']):,}\n"
        f"  ‚Ä¢ Puts: {int(pcr_row['put_oi']):,}\n\n"
        f"üìä <a href='https://finance.yahoo.com/quote/{pcr_row['ticker']}/options'>View on Yahoo Finance</a>"
    )
    
    for sub in subscribers:
        try:
            await bot.send_message(sub.user_id, text, disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"Failed to send PCR signal to {sub.user_id}: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Options Signal Bot.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "/signals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/pcr ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å Put/Call Ratios\n"
        "/watchlist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–∏–∫–µ—Ä—ã\n"
        "/add [TICKER] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä\n"
        "/remove [TICKER] ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"
    )

# === –ö–æ–º–∞–Ω–¥–∞ /watchlist ===
@dp.message(Command(commands=["watchlist"]))
async def cmd_watchlist(message: types.Message):
    session = SessionLocal()
    tickers = session.query(Ticker).all()
    session.close()
    if tickers:
        text = "üìå –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã:\n" + "\n".join([t.symbol for t in tickers])
    else:
        text = "–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç."
    await message.answer(text)

# === –ö–æ–º–∞–Ω–¥–∞ /add [TICKER] ===
@dp.message(Command(commands=["add"]))
async def cmd_add(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add [TICKER]")
        return
    symbol = args[1].upper()
    session = SessionLocal()
    existing = session.query(Ticker).filter(Ticker.symbol == symbol).first()
    if existing:
        await message.answer(f"{symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        new_ticker = Ticker(symbol=symbol)
        session.add(new_ticker)
        session.commit()
        await message.answer(f"‚úÖ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤.")
    session.close()

# === –ö–æ–º–∞–Ω–¥–∞ /remove [TICKER] ===
@dp.message(Command(commands=["remove"]))
async def cmd_remove(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove [TICKER]")
        return
    symbol = args[1].upper()
    session = SessionLocal()
    existing = session.query(Ticker).filter(Ticker.symbol == symbol).first()
    if existing:
        session.delete(existing)
        session.commit()
        await message.answer(f"‚ùå {symbol} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤.")
    else:
        await message.answer(f"{symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    session.close()

# === –ö–æ–º–∞–Ω–¥–∞ /signals ===
@dp.message(Command(commands=["signals"]))
async def cmd_signals(message: types.Message):
    session = SessionLocal()
    signals = session.query(SignalLog).order_by(SignalLog.signal_time.desc()).limit(10).all()
    session.close()
    if not signals:
        await message.answer("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text_lines = []
    for s in signals:
        text_lines.append(
            f"üö® {s.ticker} | {s.option_type} | Strike: {s.strike} | Exp: {s.expiration}\n"
            f"Volume change: {s.volume_change} | IV change: {s.iv_change}\n"
            f"OI change: {s.oi_change}\n"
            f"Time: {s.signal_time.strftime('%Y-%m-%d %H:%M')}\n"
            f"Source: {s.source}"
        )
    await message.answer("\n\n".join(text_lines))
    
@dp.message(Command(commands=["settings"]))
async def cmd_settings(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîä Volume Spike (k)", callback_data="setting_volume_k")],
        [InlineKeyboardButton(text="üìà IV Threshold (%)", callback_data="setting_iv_threshold")],
        [InlineKeyboardButton(text="üìÖ Expiration Days", callback_data="setting_exp_days")],
        [InlineKeyboardButton(text="‚úÖ Current Settings", callback_data="setting_show")]
    ])
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    
@dp.message(Command(commands=["pcr"]))
async def cmd_pcr(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ Put/Call Ratio –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
    session = SessionLocal()
    pcr_data = session.query(PutCallRatio).order_by(PutCallRatio.calculated_at.desc()).limit(10).all()
    session.close()
    
    if not pcr_data:
        await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –ø–æ Put/Call Ratio –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    text_lines = ["üìä <b>Put/Call Ratios</b>\n"]
    
    for pcr in pcr_data:
        emoji = "üêª" if pcr.signal_type == 'BEARISH' else "üêÇ" if pcr.signal_type == 'BULLISH' else "‚ûñ"
        text_lines.append(
            f"{emoji} <b>{pcr.ticker}</b> | {pcr.signal_type}\n"
            f"  Volume PCR: {pcr.pcr_volume:.2f} (Calls: {pcr.call_volume:,} | Puts: {pcr.put_volume:,})\n"
            f"  OI PCR: {pcr.pcr_oi:.2f} (Calls: {pcr.call_oi:,} | Puts: {pcr.put_oi:,})\n"
            f"  Time: {pcr.calculated_at.strftime('%Y-%m-%d %H:%M')}\n"
        )
    
    await message.answer("\n".join(text_lines))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(lambda c: c.data == "setting_show")
async def show_current_settings(callback: CallbackQuery):
    session = SessionLocal()
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    settings_text = (
        "üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        "üîä Volume Spike: 3.0x\n"
        "üìà IV Threshold: 10%\n"
        "üìÖ Expiration Days: 7\n\n"
        "<i>–≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤</i>"
    )
    session.close()
    await callback.message.answer(settings_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(lambda c: c.data.startswith("setting_"))
async def process_setting_callback(callback: CallbackQuery, state: FSMContext):
    setting_type = callback.data.replace("setting_", "")
    
    if setting_type == "show":
        return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    
    prompts = {
        "volume_k": "–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.0):",
        "iv_threshold": "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ä–æ—Å—Ç–∞ IV –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):",
        "exp_days": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7):"
    }
    
    await state.set_state(SettingsState.waiting_for_value)
    await state.update_data(setting_type=setting_type)
    await callback.message.answer(prompts.get(setting_type, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message(SettingsState.waiting_for_value)
async def process_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    setting_type = data.get("setting_type")
    
    try:
        value = float(message.text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if setting_type == "volume_k" and value < 1.0:
            await message.answer("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1.0")
            return
        if setting_type == "iv_threshold" and (value < 0 or value > 100):
            await message.answer("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
            return
        if setting_type == "exp_days" and value < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É Settings)
        session = SessionLocal()
        # TODO: –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î
        session.close()
        
        await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value}")
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ /settings
@dp.message(Command(commands=["subscribe"]))
async def cmd_subscribe(message: types.Message):
    session = SessionLocal()
    user_id = message.from_user.id
    username = message.from_user.username
    
    existing = session.query(Subscriber).filter(Subscriber.user_id == user_id).first()
    
    if existing:
        if existing.subscribed:
            await message.answer("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã!")
        else:
            existing.subscribed = True
            session.commit()
            await message.answer("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    else:
        new_sub = Subscriber(user_id=user_id, username=username)
        session.add(new_sub)
        session.commit()
        await message.answer(
            "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–æ–±—ã—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø—Ü–∏–æ–Ω–æ–≤.\n\n"
            "–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe"
        )
    
    session.close()

@dp.message(Command(commands=["unsubscribe"]))
async def cmd_unsubscribe(message: types.Message):
    session = SessionLocal()
    user_id = message.from_user.id
    
    subscriber = session.query(Subscriber).filter(Subscriber.user_id == user_id).first()
    
    if subscriber and subscriber.subscribed:
        subscriber.subscribed = False
        session.commit()
        await message.answer("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã.")
    
    session.close()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def start_bot():
    logger.info("üöÄ Telegram bot started")
    await dp.start_polling(bot)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è main.py ===
if __name__ == "__main__":
    asyncio.run(start_bot())
